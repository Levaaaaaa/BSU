// Park.cpp : This file contains the 'main' function. Program execution begins and ends there.
//


#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <list>

using namespace std;

int h, w;


long long calc_max_space
(
	vector<pair<int, int>> trees,
	int y_min,
	list<int>& list_x,
	vector<list<int>::iterator> nodes,
	vector<int> x_counts,
	int max_delta_x,
	int global_result
)
{
	for (int i = 0; i < trees.size(); i++) {
		if (trees[i].second <= y_min) {
			int x = trees[i].first;
			if (x_counts[x] > 0) {
				x_counts[x]--;
			}
			if (x_counts[x] == 0) {
				list<int>::iterator cur = nodes[x];
				int x_left, x_right;
				if (*cur == list_x.front()) {
					x_left = 0;
				}
				else {
					x_left = *prev(cur);
					//cur++;
				}
				if (*cur == list_x.back()) {
					x_right = w;
				}
				else {
					x_right = *next(cur);
					//cur--;
				}

				if (max_delta_x < x_right - x_left) {
					max_delta_x = x_right - x_left;
				}

				list_x.erase(cur);
			}
		}
	}

	int y_max;
	int x = INT_MAX;
	//опускаем верхнюю границу
	for (y_max = h; y_max > y_min; --y_max) {
		//для всех деревьев, выпадающих из площадки на текущей итерации (выше верхней границы, но которые не удалялись ранее)
		for (int j = 0; j < trees.size() && trees[j].second >= y_max; j++) {
			if (x_counts[trees[j].first] <= 0 || trees[j].second != y_max) {
				continue;
			}
			x = trees[j].first;
			if (x_counts[x] > 0) {
				x_counts[x]--;
			}
			if (x_counts[x] == 0) {
				list<int>::iterator cur = nodes[x];
				int x_left, x_right;
				if (cur == list_x.begin()) {
					x_left = 0;
				}
				else {
					x_left = *prev(cur);
		//			cur++;
				}
				if (next(cur) == list_x.end()) {
					x_right = w;
				}
				else {
					x_right = *next(cur);
	//				cur--;
				}

				if (max_delta_x < x_right - x_left) {
					max_delta_x = x_right - x_left;
				}

				list_x.erase(cur);
			}
		}
		global_result = max(global_result, (y_max - y_min) * max_delta_x);
	}
	return global_result;
}

int main()
{
	int n;
	ifstream in("input.txt");
	in >> n >> w >> h;

	vector<pair<int, int>> trees(n);
	list<int> list_x(0);
	int tmp_x, tmp_y;
	int count = 0;
	vector<int> ys(n);
	vector<int> xs(n);
	for (int i = 0; i < n; i++) {
		in >> tmp_x >> tmp_y;
		//нет смысла рассматривать деревья, которые находятся на границе парка, т.к. они не ограничивают площадку
		if (tmp_x != 0 && tmp_x != w && tmp_y != 0 && tmp_y != h) {
			trees[count].first = tmp_x;
			trees[count].second = tmp_y;
			xs[i] = tmp_x;
			list_x.push_back(tmp_x);
			ys[i] = tmp_y;
			count++;
		}
		//#########################################
		else {
			trees.pop_back();
		}
		//##########################################
	}
//	trees.resize(count);
	in.close();

	//сортируем деревья по убыванию у
	sort(trees.begin(), trees.begin() + trees.size(), [](pair<int, int> p1, pair<int, int> p2) {return p1.second > p2.second; });
	//int counter = 0;
	sort(xs.begin(), xs.end(), [](int x1, int x2) {return x1 > x2; });
	//формируем список х
	/*
	for (int i = 0; i < trees.size(); i++) {
		list_x.push_back(trees[i].first);
	}
	*/

	//сортируем список по возрастанию х
	list_x.sort();

	if (list_x.empty()) {
		ofstream out("output.txt");
		out << w * h;
		out.close();
		return 0;
	}
	//сохраним число деревьев с каждым х, а затем удалим повторяющиеся х из списка
	vector<list<int>::iterator> nodes(w);
	vector<int> x_counts(w, 0);



	//list<int>::iterator cur = list_x.begin();
	//int unique_x_count = list_x.size();
	for (list<int>::iterator cur = list_x.begin(); cur != list_x.end(); cur++) {
		//		list<int>::iterator p = list<int>::iterator(cur);
		x_counts[*cur]++;
	}

	list_x.erase(unique(list_x.begin(), list_x.end()), list_x.end());
	ys.erase(unique(ys.begin(), ys.end()), ys.end());
	sort(ys.begin(), ys.end(), [](int y1, int y2) { return y2 < y1; });
	/*
	//убираем повторяющиеся значения х из списка
	int cur_x = list_x.front();
	//list<int>::iterator cur_beg = list_x.begin();
	for (list<int>::iterator cur_beg = list_x.begin(); cur_beg != list_x.end(); cur_beg++) {
		cur_x = *cur_beg;
		cur = cur_beg;
		cur++;
		while (list_x.size() != 1 && cur != list_x.end() && cur_x == *cur) {
			list_x.erase(cur);
			cur = cur_beg;
			cur++;
		}
	}
	*/
	//cur = list_x.begin();
	list<int> list_x_saved;
	for (list<int>::iterator cur = list_x.begin(); cur != list_x.end(); cur++) {
		nodes[*cur] = cur;
		list_x_saved.push_back(*cur);
//		cur++;
	}
	//найдем максимальную разницу по х между деревьями
	int max_delta_x = list_x.front();
	list<int>::iterator cur = list_x.begin();
	int x_prev = *cur;
	int x_cur;
	cur++;
	for (; cur != list_x.end(); cur++) {
		x_cur = *cur;
		if (max_delta_x < *cur - *prev(cur)) {
			max_delta_x = *cur - *prev(cur);
		}
		x_prev = *cur;
	}
	if (w - list_x.back() > max_delta_x) {
		max_delta_x = w - list_x.back();
	}
	//предварительная подготовка завершена, начинаем алгоритм
	/*
		будем в цикле идти по уникальным значениям у, уменьшать число деревьев, находящихся на площадке и обновлять площадь
	*/
	int y_min = trees[0].second, y_max = h;
	long long result = (y_max - y_min) * max_delta_x;
	for (int i = 0; i < trees.size(); i++) {
		if (y_min == trees[i].second) {		//обеспечить уникальность у
			continue;
		}
		y_min = trees[i].second;

		//достаём бубен

		result = calc_max_space(trees, y_min, list_x, nodes, x_counts, max_delta_x, result);

		list_x = list<int>(list_x_saved);
		for (list<int>::iterator cur = list_x.begin(); cur != list_x.end(); cur++) {
			nodes[*cur] = cur;
		}
	}

	//обработать когда у совпадает с нижней границей (аналогично выше)
	//list_x = list<int>(list_x_saved);
	y_min = 0;
	result = calc_max_space(trees, y_min, list_x, nodes, x_counts, max_delta_x, result);


	ofstream out("output.txt");
	out << result;
	out.close();
	return 0;
}